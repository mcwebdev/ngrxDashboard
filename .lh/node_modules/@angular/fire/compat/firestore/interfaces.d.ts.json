{
    "sourceFile": "node_modules/@angular/fire/compat/firestore/interfaces.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1691715513927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1691715513927,
            "name": "Commit-0",
            "content": "import { Subscriber } from 'rxjs';\nimport firebase from 'firebase/compat/app';\nexport declare type Settings = firebase.firestore.Settings;\nexport declare type CollectionReference<T = DocumentData> = firebase.firestore.CollectionReference<T>;\nexport declare type DocumentReference<T = DocumentData> = firebase.firestore.DocumentReference<T>;\nexport declare type PersistenceSettings = firebase.firestore.PersistenceSettings;\nexport declare type DocumentChangeType = firebase.firestore.DocumentChangeType;\nexport declare type SnapshotOptions = firebase.firestore.SnapshotOptions;\nexport declare type FieldPath = firebase.firestore.FieldPath;\nexport declare type Query<T = DocumentData> = firebase.firestore.Query<T>;\nexport declare type SetOptions = firebase.firestore.SetOptions;\nexport declare type DocumentData = firebase.firestore.DocumentData;\nexport interface DocumentSnapshotExists<T> extends firebase.firestore.DocumentSnapshot<T> {\n    readonly exists: true;\n    data(options?: SnapshotOptions): T;\n}\nexport interface DocumentSnapshotDoesNotExist extends firebase.firestore.DocumentSnapshot {\n    readonly exists: false;\n    data(options?: SnapshotOptions): undefined;\n    get(fieldPath: string | FieldPath, options?: SnapshotOptions): undefined;\n}\nexport declare type DocumentSnapshot<T> = DocumentSnapshotExists<T> | DocumentSnapshotDoesNotExist;\nexport interface QueryDocumentSnapshot<T> extends firebase.firestore.QueryDocumentSnapshot<T> {\n    data(options?: SnapshotOptions): T;\n}\nexport interface QuerySnapshot<T> extends firebase.firestore.QuerySnapshot<T> {\n    readonly docs: QueryDocumentSnapshot<T>[];\n}\nexport interface DocumentChange<T> extends firebase.firestore.DocumentChange<T> {\n    readonly doc: QueryDocumentSnapshot<T>;\n}\nexport interface DocumentChangeAction<T> {\n    type: DocumentChangeType;\n    payload: DocumentChange<T>;\n}\nexport interface Action<T> {\n    type: string;\n    payload: T;\n}\nexport interface Reference<T> {\n    onSnapshot: (options: firebase.firestore.SnapshotListenOptions, sub: Subscriber<any>) => any;\n}\nexport declare type QueryFn<T = DocumentData> = (ref: CollectionReference<T>) => Query<T>;\nexport declare type QueryGroupFn<T = DocumentData> = (query: Query<T>) => Query<T>;\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n *\n * Example:\n *\n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n *\n * // This addition would not be a result of the query above\n * ref.add({\n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n */\nexport interface AssociatedReference<T = DocumentData> {\n    ref: CollectionReference<T>;\n    query: Query<T>;\n}\n"
        }
    ]
}