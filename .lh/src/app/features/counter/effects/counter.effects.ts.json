{
    "sourceFile": "src/app/features/counter/effects/counter.effects.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1691717599261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691717834945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,24 @@\n import { Injectable } from '@angular/core';\r\n import { Actions, ofType, createEffect } from '@ngrx/effects';\r\n-import { EMPTY } from 'rxjs';\r\n-import { mergeMap, catchError } from 'rxjs/operators';\r\n+import { from, of } from 'rxjs'; // Import 'from' and 'of'\r\n+import { mergeMap, catchError, map } from 'rxjs/operators';\r\n import * as CounterActions from '../actions/counter.actions';\r\n import { CounterService } from '../components/counter.service';\r\n-import { pipe } from 'rxjs';\r\n+\r\n @Injectable()\r\n export class CounterEffects {\r\n     saveCounter$ = createEffect(() => this.actions$.pipe(\r\n         ofType(CounterActions.increment, CounterActions.decrement, CounterActions.reset),\r\n-        mergeMap(action => this.counterService.saveCounter(action.payload)\r\n-            .pipe(\r\n-                catchError(() => EMPTY)\r\n-            ))\r\n-    )\r\n-    );\r\n+        mergeMap(action => {\r\n+            // Convert the Promise returned by saveCounter to an Observable\r\n+            const saveCounterObservable = from(this.counterService.saveCounter(action.payload));\r\n+            return saveCounterObservable.pipe(\r\n+                map(() => CounterActions.saveCounterSuccess()), // Dispatch success action\r\n+                catchError(() => of(CounterActions.saveCounterFailure())) // Dispatch failure action\r\n+            );\r\n+        })\r\n+    ));\r\n \r\n     constructor(\r\n         private actions$: Actions,\r\n         private counterService: CounterService\r\n"
                },
                {
                    "date": 1691717881105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,23 @@\n import { Injectable } from '@angular/core';\r\n import { Actions, ofType, createEffect } from '@ngrx/effects';\r\n-import { from, of } from 'rxjs'; // Import 'from' and 'of'\r\n-import { mergeMap, catchError, map } from 'rxjs/operators';\r\n+import { Store } from '@ngrx/store';\r\n+import { from, of } from 'rxjs';\r\n+import { mergeMap, catchError, map, withLatestFrom } from 'rxjs/operators';\r\n import * as CounterActions from '../actions/counter.actions';\r\n import { CounterService } from '../components/counter.service';\r\n \r\n @Injectable()\r\n export class CounterEffects {\r\n+    // Select the current counter value from the store\r\n+    counter$ = this.store.select('counter');\r\n+\r\n     saveCounter$ = createEffect(() => this.actions$.pipe(\r\n         ofType(CounterActions.increment, CounterActions.decrement, CounterActions.reset),\r\n-        mergeMap(action => {\r\n-            // Convert the Promise returned by saveCounter to an Observable\r\n-            const saveCounterObservable = from(this.counterService.saveCounter(action.payload));\r\n+        withLatestFrom(this.counter$), // Combine the latest counter value with the action\r\n+        mergeMap(([action, counter]) => { // Destructure the combined value\r\n+            // Convert the Promise returned by saveCounter to an Observable, using the current counter value\r\n+            const saveCounterObservable = from(this.counterService.saveCounter(counter));\r\n             return saveCounterObservable.pipe(\r\n                 map(() => CounterActions.saveCounterSuccess()), // Dispatch success action\r\n                 catchError(() => of(CounterActions.saveCounterFailure())) // Dispatch failure action\r\n             );\r\n@@ -20,7 +25,8 @@\n     ));\r\n \r\n     constructor(\r\n         private actions$: Actions,\r\n-        private counterService: CounterService\r\n+        private counterService: CounterService,\r\n+        private store: Store<{ counter: number }> // Inject the store\r\n     ) { }\r\n }\r\n"
                }
            ],
            "date": 1691717599261,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\r\nimport { EMPTY } from 'rxjs';\r\nimport { mergeMap, catchError } from 'rxjs/operators';\r\nimport * as CounterActions from '../actions/counter.actions';\r\nimport { CounterService } from '../components/counter.service';\r\nimport{pipe} from 'rxjs';\r\n@Injectable()\r\nexport class CounterEffects {\r\n    saveCounter$ = createEffect(() => this.actions$.pipe(\r\n        ofType(CounterActions.increment, CounterActions.decrement, CounterActions.reset),\r\n        mergeMap(action => this.counterService.saveCounter(action.payload)\r\n            .pipe(\r\n                catchError(() => EMPTY)\r\n            ))\r\n    )\r\n    );\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private counterService: CounterService\r\n    ) { }\r\n}\r\n"
        }
    ]
}